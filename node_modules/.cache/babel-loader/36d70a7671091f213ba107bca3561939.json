{"ast":null,"code":"import { API_URL } from \"../config\";\nexport const findMatches = state => state.matches;\n\nconst createActionName = name => `api/matches/${name}`;\n\nconst UPDATE_MATCHES = createActionName(\"UPDATE_MATCHES\");\nexport const updateMatches = payload => ({\n  type: UPDATE_MATCHES,\n  payload\n});\nexport const fetchMatches = dispatch => {\n  return dispatch => {\n    fetch(API_URL + '/matches').then(res => res.json()).then(matches => dispatch(updateMatches(matches)));\n  };\n};\n\nconst reducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_MATCHES:\n      return [...action.payload];\n\n    default:\n      return statePart;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/wiktor2/Desktop/programowanie/PROGRAMOWANIE/projekty w react/olimpia-app(testy)/komreduxserver/src/redux/matchesRedux.js"],"names":["API_URL","findMatches","state","matches","createActionName","name","UPDATE_MATCHES","updateMatches","payload","type","fetchMatches","dispatch","fetch","then","res","json","reducer","statePart","action"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AAEA,OAAO,MAAMC,WAAW,GAAGC,KAAK,IAAIA,KAAK,CAACC,OAAnC;;AAEP,MAAMC,gBAAgB,GAAGC,IAAI,IAAK,eAAcA,IAAK,EAArD;;AACA,MAAMC,cAAc,GAAGF,gBAAgB,CAAC,gBAAD,CAAvC;AAEA,OAAO,MAAMG,aAAa,GAAGC,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEH,cAAR;AAAwBE,EAAAA;AAAxB,CAAL,CAA7B;AACP,OAAO,MAAME,YAAY,GAAGC,QAAQ,IAAI;AACpC,SAAQA,QAAD,IAAc;AACjBC,IAAAA,KAAK,CAACZ,OAAO,GAAG,UAAX,CAAL,CACKa,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUV,OAAO,IAAIQ,QAAQ,CAACJ,aAAa,CAACJ,OAAD,CAAd,CAF7B;AAGC,GAJL;AAKH,CANM;;AAQP,MAAMa,OAAO,GAAG,YAA4B;AAAA,MAA3BC,SAA2B,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACxC,UAAOA,MAAM,CAACT,IAAd;AACI,SAAKH,cAAL;AACI,aAAO,CAAC,GAAGY,MAAM,CAACV,OAAX,CAAP;;AACJ;AACI,aAAOS,SAAP;AAJR;AAMH,CAPD;;AAQA,eAAeD,OAAf","sourcesContent":["import { API_URL } from \"../config\";\n\nexport const findMatches = state => state.matches;\n\nconst createActionName = name => `api/matches/${name}`;\nconst UPDATE_MATCHES = createActionName(\"UPDATE_MATCHES\");\n\nexport const updateMatches = payload => ({ type: UPDATE_MATCHES, payload});\nexport const fetchMatches = dispatch => {\n    return (dispatch) => {\n        fetch(API_URL + '/matches')\n            .then(res => res.json())\n            .then(matches => dispatch(updateMatches(matches)));\n        }\n}\n\nconst reducer = (statePart = [], action) => {\n    switch(action.type) {\n        case UPDATE_MATCHES:\n            return [...action.payload];\n        default:\n            return statePart;\n    }\n}\nexport default reducer;"]},"metadata":{},"sourceType":"module"}