{"ast":null,"code":"import { API_URL } from \"../config\";\nexport const findStatus = state => state.status;\nexport const findStatusByMatchIdAndUserId = (_ref, matchId, userId) => {\n  let {\n    status\n  } = _ref;\n  return status.find(stat => stat.matchId === matchId && stat.userId === userId);\n};\n\nconst createActionName = name => `api/status/${name}`;\n\nconst UPDATE_STATUS = createActionName(\"UPDATE_STATUS\");\nconst SEND_STATUS = createActionName('SEND_STATUS');\nexport const updateStatus = payload => ({\n  type: UPDATE_STATUS,\n  payload\n});\nexport const fetchStatus = dispatch => {\n  return dispatch => {\n    fetch(API_URL + '/status').then(res => res.json()).then(status => dispatch(updateStatus(status)));\n  };\n};\nexport const sendStatus = payload => ({\n  type: SEND_STATUS,\n  payload\n});\nexport const sendStatusRequest = newStatus => {\n  const URL = API_URL + '/status/' + newStatus.id;\n  return dispatch => {\n    const options = {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newStatus)\n    };\n    fetch(URL, options).then(res => {\n      if (res.ok) dispatch(sendStatus(newStatus));else console.log(res);\n    });\n  };\n};\n\nconst reducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case UPDATE_STATUS:\n      return [...action.payload];\n\n    case SEND_STATUS:\n      return statePart.map(status => status.matchId === action.payload.matchId && status.userId === action.payload.userId ? { ...action.payload\n      } : status);\n\n    default:\n      return statePart;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/wiktor2/Desktop/programowanie/PROGRAMOWANIE/projekty w react/olimpia-app(testy)/komreduxserver/src/redux/statusRedux.js"],"names":["API_URL","findStatus","state","status","findStatusByMatchIdAndUserId","matchId","userId","find","stat","createActionName","name","UPDATE_STATUS","SEND_STATUS","updateStatus","payload","type","fetchStatus","dispatch","fetch","then","res","json","sendStatus","sendStatusRequest","newStatus","URL","id","options","method","headers","body","JSON","stringify","ok","console","log","reducer","statePart","action","map"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AAEA,OAAO,MAAMC,UAAU,GAAGC,KAAK,IAAIA,KAAK,CAACC,MAAlC;AACP,OAAO,MAAMC,4BAA4B,GAAG,OAAaC,OAAb,EAAsBC,MAAtB;AAAA,MAAC;AAAEH,IAAAA;AAAF,GAAD;AAAA,SAAiCA,MAAM,CAACI,IAAP,CAAYC,IAAI,IAAIA,IAAI,CAACH,OAAL,KAAiBA,OAAjB,IAA4BG,IAAI,CAACF,MAAL,KAAgBA,MAAhE,CAAjC;AAAA,CAArC;;AAEP,MAAMG,gBAAgB,GAAGC,IAAI,IAAK,cAAaA,IAAK,EAApD;;AACA,MAAMC,aAAa,GAAGF,gBAAgB,CAAC,eAAD,CAAtC;AACA,MAAMG,WAAW,GAAGH,gBAAgB,CAAC,aAAD,CAApC;AAEA,OAAO,MAAMI,YAAY,GAAGC,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEJ,aAAR;AAAuBG,EAAAA;AAAvB,CAAL,CAA5B;AACP,OAAO,MAAME,WAAW,GAAGC,QAAQ,IAAI;AACnC,SAAQA,QAAD,IAAc;AACjBC,IAAAA,KAAK,CAAClB,OAAO,GAAG,SAAX,CAAL,CACKmB,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUhB,MAAM,IAAIc,QAAQ,CAACJ,YAAY,CAACV,MAAD,CAAb,CAF5B;AAGC,GAJL;AAKH,CANM;AAQP,OAAO,MAAMmB,UAAU,GAAGR,OAAO,KAAK;AAAEC,EAAAA,IAAI,EAAEH,WAAR;AAAqBE,EAAAA;AAArB,CAAL,CAA1B;AAEP,OAAO,MAAMS,iBAAiB,GAAGC,SAAS,IAAI;AAC1C,QAAMC,GAAG,GAAGzB,OAAO,GAAG,UAAV,GAAuBwB,SAAS,CAACE,EAA7C;AACA,SAAOT,QAAQ,IAAI;AACf,UAAMU,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,KADI;AAEZC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAFG;AAKZC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,SAAf;AALM,KAAhB;AAOAN,IAAAA,KAAK,CAACO,GAAD,EAAME,OAAN,CAAL,CACKR,IADL,CACUC,GAAG,IAAI;AACT,UAAGA,GAAG,CAACa,EAAP,EAAWhB,QAAQ,CAACK,UAAU,CAACE,SAAD,CAAX,CAAR,CAAX,KACKU,OAAO,CAACC,GAAR,CAAYf,GAAZ;AACR,KAJL;AAKH,GAbD;AAcH,CAhBM;;AAkBP,MAAMgB,OAAO,GAAG,YAA4B;AAAA,MAA3BC,SAA2B,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACxC,UAAOA,MAAM,CAACvB,IAAd;AACI,SAAKJ,aAAL;AACI,aAAO,CAAC,GAAG2B,MAAM,CAACxB,OAAX,CAAP;;AACJ,SAAKF,WAAL;AACI,aAAOyB,SAAS,CAACE,GAAV,CAAcpC,MAAM,IAAKA,MAAM,CAACE,OAAP,KAAmBiC,MAAM,CAACxB,OAAP,CAAeT,OAAlC,IAA6CF,MAAM,CAACG,MAAP,KAAkBgC,MAAM,CAACxB,OAAP,CAAeR,MAA/E,GACG,EAAE,GAAGgC,MAAM,CAACxB;AAAZ,OADH,GAC2BX,MADnD,CAAP;;AAEJ;AACI,aAAOkC,SAAP;AAPR;AASH,CAVD;;AAWA,eAAeD,OAAf","sourcesContent":["import { API_URL } from \"../config\";\n\nexport const findStatus = state => state.status;\nexport const findStatusByMatchIdAndUserId = ({ status }, matchId, userId) => status.find(stat => stat.matchId === matchId && stat.userId === userId)\n\nconst createActionName = name => `api/status/${name}`;\nconst UPDATE_STATUS = createActionName(\"UPDATE_STATUS\");\nconst SEND_STATUS = createActionName('SEND_STATUS');\n\nexport const updateStatus = payload => ({ type: UPDATE_STATUS, payload});\nexport const fetchStatus = dispatch => {\n    return (dispatch) => {\n        fetch(API_URL + '/status')\n            .then(res => res.json())\n            .then(status => dispatch(updateStatus(status)));\n        }\n}\n\nexport const sendStatus = payload => ({ type: SEND_STATUS, payload});\n\nexport const sendStatusRequest = newStatus => {\n    const URL = API_URL + '/status/' + newStatus.id;\n    return dispatch => {\n        const options = {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(newStatus),\n        };\n        fetch(URL, options)\n            .then(res => {\n                if(res.ok) dispatch(sendStatus(newStatus))\n                else console.log(res)\n            })\n    }\n}\n\nconst reducer = (statePart = [], action) => {\n    switch(action.type) {\n        case UPDATE_STATUS:\n            return [...action.payload];\n        case SEND_STATUS:\n            return statePart.map(status => (status.matchId === action.payload.matchId && status.userId === action.payload.userId) \n                                            ? { ...action.payload } : status)\n        default:\n            return statePart;\n    }\n}\nexport default reducer;"]},"metadata":{},"sourceType":"module"}